<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-3.2.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd">


	<bean id="personDAO" class="com.lee.spring002.aop.xml.PersonDAOImpl"></bean>
	<bean id="transaction" class="com.lee.spring002.aop.xml.Transaction"></bean>
	
	<aop:config >
		<!-- 切入点表达式，作用：确定目标类 -->
		<aop:pointcut expression="execution(* com.lee.spring002.aop.xml.PersonDAOImpl.*(..))" id="perform"/>
		<!-- ref 指向切面 -->
		<aop:aspect ref="transaction">
			<!-- 前置通知 -->
			<aop:before method="beginTransaction" pointcut-ref="perform"/>
			
			<!-- 
				后置通知
					可以获取目标方法的返回值(前置方法获取不到)
					如果目标方法抛出异常，后置通知则不会继续执行
			 -->
			<aop:after-returning method="commit" pointcut-ref="perform" returning="val"/>
			
			<!-- 
				最终通知
					无论目标方法是否抛出异常都将执行此方法
			 -->
			 <aop:after method="finallyDisplay" pointcut-ref="perform"/>
			 
			 <!-- 
			 	异常通知
			  -->
			  <aop:after-throwing method="exception" pointcut-ref="perform" throwing="content"/>
			  
			  <!-- 
			  	环绕通知
			  		能控制目标方法能否执行
			  		前置通知和后置通知能在目标方法的前后加代码，但是不能控制方法的执行
			   -->
			   <aop:around method="arround" pointcut-ref="perform"/>
		</aop:aspect>
	</aop:config>
	
	
	<bean id="exceptionAOP" class="com.lee.spring002.aop.xml.exception.ExceptionAOP"></bean>
	<bean id="stuService" class="com.lee.spring002.aop.xml.exception.StuServiceImpl">
		<property name="stuDAO" ref="stuDAO"></property>
	</bean>
	<bean id="stu2Service" class="com.lee.spring002.aop.xml.exception.Stu2ServiceImpl">
		<property name="stuDAO" ref="stuDAO"></property>
	</bean>
	<bean id="stuDAO" class="com.lee.spring002.aop.xml.exception.StuDAOImpl"></bean>

	<aop:config >
		<aop:pointcut expression="execution(* com.lee.spring002.aop.xml.exception.*ServiceImpl.*(..))" id="performException"/>
		<aop:aspect ref="exceptionAOP">
			<aop:after-throwing method="catchException" throwing="content" pointcut-ref="performException"/>
		</aop:aspect>
	</aop:config>
	
	<aop:config >
		<aop:pointcut expression="execution(* com.lee.spring002.aop.xml.exception.*ServiceImpl.login(..))" id="performException"/>
		<aop:aspect ref="exceptionAOP">
			<aop:before method="authority" pointcut-ref="performException"/>
		</aop:aspect>
	</aop:config>
	
</beans>
